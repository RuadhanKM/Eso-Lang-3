#pragma once

#define TOKEN_EQL 0b00000000000000000000000000001 // Equals: =
#define TOKEN_ADD 0b00000000000000000000000000010 // Add: +
#define TOKEN_SUB 0b00000000000000000000000000100 // Subtract: -
#define TOKEN_MUL 0b00000000000000000000000001000 // Multiplication: *
#define TOKEN_DIV 0b00000000000000000000000010000 // Divide: /
#define TOKEN_EXP 0b00000000000000000000000100000 // Exponentiation: ^ 
#define TOKEN_NUM 0b00000000000000000000001000000 // Number: 123.43, 83
#define TOKEN_STR 0b00000000000000000000010000000 // String: "Hello World", "Test"
#define TOKEN_VAR 0b00000000000000000000100000000 // Variable: foo, bar
#define TOKEN_EDL 0b00000000000000000001000000000 // End Line: ;
#define TOKEN_DEF 0b00000000000000000010000000000 // Define: let
#define TOKEN_CON 0b00000000000000000100000000000 // Conditional: if
#define TOKEN_DEQ 0b00000000000000001000000000000 // Double Equals: ==
#define TOKEN_GTT 0b00000000000000010000000000000 // Greater Than: >
#define TOKEN_LST 0b00000000000000100000000000000 // Less Than: <
#define TOKEN_GTE 0b00000000000001000000000000000 // Greater Than Equal: >=
#define TOKEN_LSE 0b00000000000010000000000000000 // Less Than Equal: <=
#define TOKEN_BPR 0b00000000000100000000000000000 // Begin Parenthasis: (
#define TOKEN_EPR 0b00000000001000000000000000000 // End Parenthasis: )
#define TOKEN_BCB 0b00000000010000000000000000000 // Begin Code Block: {
#define TOKEN_ECB 0b00000000100000000000000000000 // End Code Block: }
#define TOKEN_BAR 0b00000001000000000000000000000 // Begin Array: [
#define TOKEN_EAR 0b00000010000000000000000000000 // End Array: ]
#define TOKEN_ARS 0b00000100000000000000000000000 // Array Seperator: ,
#define TOKEN_RET 0b00001000000000000000000000000 // Return: return
#define TOKEN_LOP 0b00010000000000000000000000000 // Return: return
#define TOKEN_EOF 0b00100000000000000000000000000 // End of file
#define TOKEN_TRU 0b01000000000000000000000000000 // True: true
#define TOKEN_FLS 0b10000000000000000000000000000 // False: false

#define NUM_TOKENS 29

#define TOKENV_EQL '='
#define TOKENV_ADD '+'
#define TOKENV_SUB '-'
#define TOKENV_MUL '*'
#define TOKENV_DIV '/'
#define TOKENV_EXP '^'
#define TOKENV_BST '\"'
#define TOKENV_EST '\"'
#define TOKENV_BPR '('
#define TOKENV_EPR ')'
#define TOKENV_BCB '{'
#define TOKENV_ECB '}'
#define TOKENV_BAR '['
#define TOKENV_EAR ']'
#define TOKENV_ARS ','
#define TOKENV_EDL ';'
#define TOKENV_GTT '>'
#define TOKENV_LST '<'

#define TOKENV_DEF "let"
#define TOKENV_CON "if"
#define TOKENV_RET "return"
#define TOKENV_LOP "while"
#define TOKENV_TRU "true"
#define TOKENV_FLS "false"